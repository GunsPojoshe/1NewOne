cd C:\Games\1NewOne\1NewOne\app
(Папка)

cd C:\Games\1NewOne\1NewOne\app\alembic.ini
cd C:\Games\1NewOne\1NewOne\app\main.py

# app/main.py
from fastapi import FastAPI
from app.routers import dashboard

app = FastAPI()

# Подключаем маршруты
app.include_router(dashboard.router)

@app.get("/")
async def root():
    return {"message": "Добро пожаловать в панель управления продажами!"}

cd C:\Games\1NewOne\1NewOne\app\project_structure_and_code.txt

В этом файле нет кода.


cd C:\Games\1NewOne\1NewOne\app\save_project_structure_and_code.py

# save_project_structure_and_code.py
import os

def save_project_structure_and_code(root_dir, output_file):
    """
    Сохраняет структуру проекта и содержимое всех файлов в текстовый файл.

    :param root_dir: Корневая директория проекта.
    :param output_file: Имя файла для сохранения структуры и кода.
    """
    with open(output_file, "w", encoding="utf-8") as outfile:
        # Рекурсивно обходим все папки и файлы
        for root, dirs, files in os.walk(root_dir):
            # Игнорируем папку venv и другие ненужные папки
            if "venv" in root or "__pycache__" in root:
                continue

            # Записываем текущую папку
            outfile.write(f"cd {root}\n")
            outfile.write("(Папка)\n\n")  # Добавляем пометку "Папка"

            # Записываем файлы в текущей папке
            for file in files:
                file_path = os.path.join(root, file)
                outfile.write(f"cd {file_path}\n")

                # Записываем содержимое файла (если это текстовый файл)
                if file.endswith((".py", ".txt", ".md", ".html", ".env")):
                    outfile.write("\n")
                    try:
                        with open(file_path, "r", encoding="utf-8") as infile:
                            content = infile.read()
                            if content.strip():  # Проверяем, не пустой ли файл
                                outfile.write(content)
                            else:
                                outfile.write("В этом файле нет кода.\n")
                    except UnicodeDecodeError:
                        outfile.write("(Ошибка чтения: неверная кодировка)\n")
                    outfile.write("\n\n")

# Путь к корневой директории проекта
root_dir = os.path.dirname(os.path.abspath(__file__))

# Имя файла для сохранения структуры и кода
output_file = "project_structure_and_code.txt"

# Сохраняем структуру проекта и код
save_project_structure_and_code(root_dir, output_file)
print(f"Структура проекта и код успешно сохранены в {output_file}")

cd C:\Games\1NewOne\1NewOne\app\__init__.py

В этом файле нет кода.


cd C:\Games\1NewOne\1NewOne\app\alembic
(Папка)

cd C:\Games\1NewOne\1NewOne\app\alembic\env.py

from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
target_metadata = None

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


cd C:\Games\1NewOne\1NewOne\app\alembic\README
cd C:\Games\1NewOne\1NewOne\app\alembic\script.py.mako
cd C:\Games\1NewOne\1NewOne\app\alembic\versions
(Папка)

cd C:\Games\1NewOne\1NewOne\app\api
(Папка)

cd C:\Games\1NewOne\1NewOne\app\api\ozon.py

# app/api/ozon.py
import requests
from app.core.config import settings

class OzonAPI:
    def __init__(self):
        self.base_url = settings.ozon_base_url
        self.api_key = settings.ozon_api_key
        self.client_id = settings.ozon_client_id

    def get_orders(self):
        """Получить список заказов с Ozon."""
        url = f"{self.base_url}/v2/posting/fbs/list"
        headers = {
            "Client-Id": self.client_id,
            "Api-Key": self.api_key,
        }
        payload = {
            "dir": "ASC",
            "filter": {},
            "limit": 10,
            "offset": 0,
        }
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()

cd C:\Games\1NewOne\1NewOne\app\api\wildberries.py

# app/api/wildberries.py
import requests
from app.core.config import settings

class WildberriesAPI:
    def __init__(self):
        self.base_url = settings.wildberries_base_url
        self.api_key = settings.wildberries_api_key

    def get_orders(self):
        """Получить список заказов с Wildberries."""
        url = f"{self.base_url}/api/v1/orders"
        headers = {"Authorization": self.api_key}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()

cd C:\Games\1NewOne\1NewOne\app\api\__init__.py

В этом файле нет кода.


cd C:\Games\1NewOne\1NewOne\app\core
(Папка)

cd C:\Games\1NewOne\1NewOne\app\core\config.py

# app/core/config.py
from pydantic import BaseSettings

class Settings(BaseSettings):
    # Настройки для Wildberries API
    wildberries_api_key: str
    wildberries_base_url: str = "https://suppliers-api.wildberries.ru"

    # Настройки для Ozon API
    ozon_api_key: str
    ozon_client_id: str
    ozon_base_url: str = "https://api-seller.ozon.ru"

    # Настройки базы данных
    database_url: str = "sqlite:///./sales.db"

    class Config:
        env_file = ".env"

settings = Settings()

cd C:\Games\1NewOne\1NewOne\app\core\database.py

# app/core/database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from .config import settings

# Создаем подключение к базе данных
engine = create_engine(settings.database_url)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

cd C:\Games\1NewOne\1NewOne\app\core\models.py

# app/core/models.py
from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from .database import Base

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    category = Column(String, nullable=False)
    price = Column(Float, nullable=False)
    stock = Column(Integer, nullable=False)
    rating = Column(Float, nullable=True)

class Order(Base):
    __tablename__ = "orders"
    id = Column(Integer, primary_key=True, index=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer, nullable=False)
    total_price = Column(Float, nullable=False)
    order_date = Column(DateTime, nullable=False)

    product = relationship("Product")

cd C:\Games\1NewOne\1NewOne\app\core\__init__.py

В этом файле нет кода.


cd C:\Games\1NewOne\1NewOne\app\routers
(Папка)

cd C:\Games\1NewOne\1NewOne\app\routers\dashboard.py

# app/routers/dashboard.py
from fastapi import APIRouter
from app.api.wildberries import WildberriesAPI
from app.api.ozon import OzonAPI
from app.services.analytics import AnalyticsService

router = APIRouter()

@router.get("/dashboard")
async def get_dashboard():
    """Получить данные для главной страницы."""
    # Получаем данные от Wildberries
    wb_api = WildberriesAPI()
    wb_orders = wb_api.get_orders()

    # Получаем данные от Ozon
    ozon_api = OzonAPI()
    ozon_orders = ozon_api.get_orders()

    # Анализируем данные
    analytics = AnalyticsService(wb_orders + ozon_orders)
    total_sales = analytics.calculate_total_sales()
    top_products = analytics.get_top_products()

    return {
        "total_sales": total_sales,
        "top_products": top_products,
    }

cd C:\Games\1NewOne\1NewOne\app\routers\integrations.py

В этом файле нет кода.


cd C:\Games\1NewOne\1NewOne\app\routers\products.py

В этом файле нет кода.


cd C:\Games\1NewOne\1NewOne\app\routers\__init__.py

В этом файле нет кода.


cd C:\Games\1NewOne\1NewOne\app\services
(Папка)

cd C:\Games\1NewOne\1NewOne\app\services\analytics.py

# app/services/analytics.py
import pandas as pd

class AnalyticsService:
    def __init__(self, orders):
        self.orders = orders

    def calculate_total_sales(self):
        """Рассчитать общую сумму продаж."""
        df = pd.DataFrame(self.orders)
        return df["price"].sum()

    def get_top_products(self, n=10):
        """Получить топ-N товаров по продажам."""
        df = pd.DataFrame(self.orders)
        return df.groupby("product_name")["price"].sum().nlargest(n).to_dict()

cd C:\Games\1NewOne\1NewOne\app\services\visualization.py

В этом файле нет кода.


cd C:\Games\1NewOne\1NewOne\app\services\__init__.py

В этом файле нет кода.


cd C:\Games\1NewOne\1NewOne\app\templates
(Папка)

cd C:\Games\1NewOne\1NewOne\app\templates\index.html

В этом файле нет кода.


